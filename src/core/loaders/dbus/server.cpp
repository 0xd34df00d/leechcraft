/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "server.h"
#include <fstream>
#include <map>
#include <iomanip>
#include <QDBusConnection>
#include <QDBusMetaType>
#include <QCoreApplication>
#include <QLocalSocket>
#include <QDir>
#include <QThread>
#include <QMutex>
#include <QDateTime>
#include <QtDebug>
#include "../sopluginloader.h"
#include "marshalling.h"

#ifdef USE_QT5
	#define qInstallMsgHandler qInstallMessageHandler
#endif

namespace LeechCraft
{
namespace DBus
{
	namespace
	{
		QMutex G_DbgMutex;
		uint Counter = 0;

#ifndef USE_QT5
		void Write (QtMsgType type, const char *message)
		{
#else
		void Write (QtMsgType type, const QMessageLogContext&, const QString& msgStr)
		{
			const auto& messageBA = msgStr.toUtf8 ();
			const auto message = messageBA.constData ();
#endif
			if (!strcmp (message, "QPixmap::handle(): Pixmap is not an X11 class pixmap") ||
					strstr (message, ": Painter not active"))
				return;

			static const std::map<QtMsgType, QString> fileName =
			{
				{QtDebugMsg, "debug_slave.log"},
				{QtWarningMsg, "warning_slave.log"},
				{QtCriticalMsg, "critical_slave.log"},
				{QtFatalMsg, "fatal_slave.log"}
			};

			const QString name = QDir::homePath () + "/.leechcraft/" + fileName.at (type);

			G_DbgMutex.lock ();

			std::ofstream ostr;
			ostr.open (QDir::toNativeSeparators (name).toStdString ().c_str (), std::ios::app);
			ostr << "["
				<< QDateTime::currentDateTime ().toString ("dd.MM.yyyy HH:mm:ss.zzz").toStdString ()
				<< "] ["
				<< QThread::currentThread ()
				<< "] ["
				<< std::setfill ('0')
				<< std::setw (3)
				<< Counter++
				<< "] "
				<< message
				<< std::endl;

			ostr.close ();
			G_DbgMutex.unlock ();
		}
	}

	Server::Server ()
	: QObject ()
	{
		qInstallMsgHandler (Write);
		const auto pid = QCoreApplication::applicationPid ();

		RegisterTypes ();

		auto sb = QDBusConnection::sessionBus ();
		const auto& serviceName = QString ("org.LeechCraft.Wrapper_%1").arg (pid);
		qDebug () << "registering service..." << sb.registerService (serviceName);
		qDebug () << "registering primary object..." << sb.registerObject ("/org/LeechCraft/Control",
				this, QDBusConnection::ExportAllContents);

		QLocalSocket socket;
		socket.connectToServer (QString ("lc_waiter_%1").arg (pid));
		qDebug () << "notifying master..." << socket.waitForConnected ();
	}

	bool Server::Load (const QString& path)
	{
		Loader_.reset (new Loaders::SOPluginLoader (path));
		if (!Loader_->Load ())
			return false;

		QDBusConnection::sessionBus ().registerObject ("/org/LeechCraft/Plugin",
				Loader_->Instance (), QDBusConnection::ExportAllContents);
		return true;
	}

	bool Server::Unload (const QString& path)
	{
		return Loader_->Unload ();
	}
}
}
