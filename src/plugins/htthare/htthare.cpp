/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "htthare.h"
#include <QIcon>
#include <QEventLoop>
#include <QTimer>
#include <xmlsettingsdialog/xmlsettingsdialog.h>
#include <util/util.h>
#include "server.h"
#include "xmlsettingsmanager.h"
#include "addressesmodelmanager.h"

namespace LeechCraft
{
namespace HttHare
{
	void Plugin::Init (ICoreProxy_ptr)
	{
		Util::InstallTranslator ("htthare");

		qRegisterMetaType<AddrList_t> ("LeechCraft::HttHare::AddrList_t");
		qRegisterMetaTypeStreamOperators<AddrList_t> ();

		AddrMgr_ = new AddressesModelManager (this);
		connect (AddrMgr_,
				SIGNAL (addressesChanged ()),
				this,
				SLOT (reapplyAddresses ()));

		XSD_.reset (new Util::XmlSettingsDialog);
		XSD_->RegisterObject (&XmlSettingsManager::Instance (), "httharesettings.xml");

		XSD_->SetDataSource ("AddressesDataView", AddrMgr_->GetModel ());

		XmlSettingsManager::Instance ().RegisterObject ("EnableServer",
				this, "handleEnableServerChanged");
		handleEnableServerChanged ();
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.HttHare";
	}

	void Plugin::Release ()
	{
		S_.reset ();
	}

	QString Plugin::GetName () const
	{
		return "HTThare";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Share your files over local network via HTTP.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	Util::XmlSettingsDialog_ptr Plugin::GetSettingsDialog () const
	{
		return XSD_;
	}

	void Plugin::handleEnableServerChanged ()
	{
		const bool enable = XmlSettingsManager::Instance ().property ("EnableServer").toBool ();

		if (enable == static_cast<bool> (S_))
			return;

		if (S_)
			S_.reset ();
		else
		{
			S_.reset (new Server { AddrMgr_->GetAddresses () });
			S_->Start ();
		}
	}

	void Plugin::reapplyAddresses ()
	{
		if (!S_)
			return;

		S_->Stop ();
		S_.reset ();

		QEventLoop loop;
		QTimer::singleShot (100, &loop, SLOT (quit ()));
		loop.exec ();

		S_.reset (new Server { AddrMgr_->GetAddresses () });
		S_->Start ();
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_htthare, LeechCraft::HttHare::Plugin);
