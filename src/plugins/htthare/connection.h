/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <boost/asio.hpp>

namespace LeechCraft
{
namespace HttHare
{
	class StorageManager;
	class IconResolver;
	class TrManager;

	class Connection : public std::enable_shared_from_this<Connection>
	{
		boost::asio::io_service::strand Strand_;
		boost::asio::ip::tcp::socket Socket_;

		const StorageManager& StorageMgr_;
		IconResolver * const IconResolver_;
		TrManager * const TrManager_;

		boost::asio::streambuf Buf_;
	public:
		Connection (boost::asio::io_service&, const StorageManager&, IconResolver*, TrManager*);

		Connection (const Connection&) = delete;
		Connection& operator= (const Connection&) = delete;

		boost::asio::ip::tcp::socket& GetSocket ();
		boost::asio::io_service::strand& GetStrand ();
		IconResolver* GetIconResolver () const;
		TrManager* GetTrManager () const;

		const StorageManager& GetStorageManager () const;

		void Start ();
	private:
		void HandleHeader (const boost::system::error_code&, ulong);
	};

	typedef std::shared_ptr<Connection> Connection_ptr;
}
}
