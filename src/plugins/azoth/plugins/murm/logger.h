/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QObject>
#include <QFile>
#include <interfaces/azoth/ihaveconsole.h>

class QVariant;
class QUrl;

namespace LeechCraft
{
namespace Azoth
{
namespace Murm
{
	class Logger : public QObject
	{
		Q_OBJECT

		const QString Filename_;
		bool FileEnabled_ = true;
	public:
		class LogProxy
		{
			friend class Logger;

			Logger& L_;
			const IHaveConsole::PacketDirection Dir_;

			bool IsFirst_ = true;
			std::unique_ptr<QFile> File_;

			QByteArray CurrentString_;

			LogProxy (Logger&, IHaveConsole::PacketDirection);
		public:
			LogProxy (const LogProxy&) = delete;
			LogProxy (LogProxy&&) = default;

			~LogProxy ();

			template<typename T>
			LogProxy operator<< (const T& t)
			{
				if (!IsFirst_)
					Write (" ");
				Write (t);
				IsFirst_ = false;
				return std::move (*this);
			}
		private:
			void Write (const char*);
			void Write (const QString&);
			void Write (qint64);
			void Write (const QUrl&);
			void Write (const QVariant&);

			void WriteImpl (const QByteArray&);

			template<typename T>
			void Write (const QList<T>& list)
			{
				Write ("[ ");
				bool isFirst = true;
				for (const auto& value : list)
				{
					if (!isFirst)
						Write ("; ");
					isFirst = false;
					Write (value);
				}
				Write (" ]");
			}
		};

		Logger (const QString& id, QObject* = 0);

		void SetFileEnabled (bool);

		LogProxy operator() (IHaveConsole::PacketDirection dir)
		{
			return LogProxy { *this, dir };
		}

		template<typename T>
		LogProxy operator<< (const T& t)
		{
			return LogProxy { *this, IHaveConsole::PacketDirection::In } << t;
		}
	signals:
		void gotConsolePacket (const QByteArray&, IHaveConsole::PacketDirection, const QString&);
	};
}
}
}
