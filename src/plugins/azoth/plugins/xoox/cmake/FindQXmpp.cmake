# Find gloox library

#
# QXMPP_INCLUDE_DIR
# QXMPP_LIBRARIES
# QXMPP_FOUND

# Copyright (c) 2010 Georg Rudoy <0xd34df00d@gmail.com>
# Win32 additions by Eugene Mamin <TheDZhon@gmail.com>

FIND_PATH(QXMPP_INCLUDE_DIR qxmpp/QXmppClient.h PATH ENV)
FIND_LIBRARY(QXMPP_LIBRARIES NAMES qxmpp)

IF(QXMPP_LOCAL)
	FIND_PATH(QXMPP_INCLUDE_DIR QXmppClient.h "${QXMPP_LOCAL}/src")
	IF(QXMPP_INCLUDE_DIR)
		IF(WIN32)		
			#probe for both debug and release libs
			SET(QXMPP_LIBRARIES_RELEASE "${QXMPP_LOCAL}/lib/qxmpp.lib")
			SET(QXMPP_LIBRARIES_DEBUG "${QXMPP_LOCAL}/lib/qxmpp_d.lib")
			#successfull for d and r simult.
			IF (QXMPP_LIBRARIES_RELEASE AND QXMPP_LIBRARIES_DEBUG)
				IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPES)
					SET(QXMPP_LIBRARIES optimized ${QXMPP_LIBRARIES_RELEASE} debug ${QXMPP_LIBRARIES_DEBUG})
					SET(_WIN32_ADDITIONAL_MESS "You are lucky: both debug and release QXMPP versions available") 
				ELSE(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPES)
					SET(QXMPP_LIBRARIES ${QXMPP_LIBRARIES_RELEASE})
					SET(_WIN32_ADDITIONAL_MESS "Warning: Your generator doesn't support separate debug and release libs") 
				ENDIF(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPES)
			ENDIF(QXMPP_LIBRARIES_RELEASE AND QXMPP_LIBRARIES_DEBUG)
			#succ only for release
			IF(QXMPP_LIBRARIES_RELEASE AND NOT QXMPP_LIBRARIES_DEBUG)
				SET(QXMPP_LIBRARIES ${QXMPP_LIBRARIES_RELEASE})
				SET(_WIN32_ADDITIONAL_MESS "Warning: only release QXMPP library available") 
			ENDIF(QXMPP_LIBRARIES_RELEASE AND NOT QXMPP_LIBRARIES_DEBUG)
			#succ only for debug
			IF(NOT QXMPP_LIBRARIES_RELEASE AND QXMPP_LIBRARIES_DEBUG)
				SET(QXMPP_LIBRARIES ${QXMPP_LIBRARIES_DEBUG})
				SET(_WIN32_ADDITIONAL_MESS "Warning: only debug QXMPP library available") 
			ENDIF(NOT QXMPP_LIBRARIES_RELEASE AND QXMPP_LIBRARIES_DEBUG)
		ELSE(WIN32)
			SET(QXMPP_LIBRARIES "${QXMPP_LOCAL}/lib/libqxmpp.a")
		ENDIF(WIN32)
	ENDIF(QXMPP_INCLUDE_DIR)
ENDIF(QXMPP_LOCAL)

IF(QXMPP_LIBRARIES AND QXMPP_INCLUDE_DIR)
	IF(NOT QXMPP_LOCAL)
		SET(QXMPP_INCLUDE_DIR "${QXMPP_INCLUDE_DIR}/qxmpp")
	ENDIF(NOT QXMPP_LOCAL)
	SET(QXMPP_FOUND 1)
ENDIF(QXMPP_LIBRARIES AND QXMPP_INCLUDE_DIR)

IF(QXMPP_FOUND)
	MESSAGE(STATUS "Found QXmpp libraries at ${QXMPP_LIBRARIES}")
	MESSAGE(STATUS "Found QXmpp headers at ${QXMPP_INCLUDE_DIR}")
	IF(WIN32)
		MESSAGE(STATUS ${_WIN32_ADDITIONAL_MESS})
	ENDIF(WIN32)
ELSE(QXMPP_FOUND)
	IF(QXMPP_FIND_REQUIRED)
		MESSAGE(FATAL_ERROR "Could NOT find required QXmpp library, aborting")
	ELSE()
		MESSAGE(STATUS "Could NOT find QXmpp")
	ENDIF()
ENDIF()
