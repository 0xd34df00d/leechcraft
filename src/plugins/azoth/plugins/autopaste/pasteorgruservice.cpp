/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Slava Barinov <rayslava@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "pasteorgruservice.h"
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QtDebug>
#include <QRegExp>

namespace LeechCraft
{
namespace Azoth
{
namespace Autopaste
{
	PasteOrgRuService::PasteOrgRuService (QObject *entry, QObject *parent)
	: PasteServiceBase (entry, parent)
	{

	}

	void PasteOrgRuService::Paste (const PasteParams& params)
	{
		QNetworkRequest req (QString ("http://paste.org.ru:2/"));
		const QByteArray& data = "c=" + params.Text_.toUtf8 ().toPercentEncoding ();

		InitReply (params.NAM_->post (req, data));
	}

	void PasteOrgRuService::handleFinished ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		const auto& bytes = reply->readAll ();
		sender ()->deleteLater ();
		
		QRegExp rx("a href='(/\\?[A-Za-z0-9]+)'");
		if (rx.indexIn (bytes) == -1)
		{
			qWarning () << Q_FUNC_INFO << "paste.org.ru service problem";
			return;
		}
		QUrl url (QString ("http://paste.org.ru:2%1").arg (rx.cap (1)));
		FeedURL (url.toString ());
	}
}
}
}
