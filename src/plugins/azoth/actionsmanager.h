/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_ACTIONSMANAGER_H
#define PLUGINS_AZOTH_ACTIONSMANAGER_H
#include <functional>
#include <QObject>
#include <QHash>
#include <QMetaType>
#include <interfaces/core/ihookproxy.h>

class QAction;

namespace LeechCraft
{
namespace Azoth
{
	class ICLEntry;
	class IAuthable;

	class ActionsManager : public QObject
	{
		Q_OBJECT

		typedef QHash<const ICLEntry*, QHash<QByteArray, QAction*>> Entry2Actions_t;
		Entry2Actions_t Entry2Actions_;
	public:
		enum CLEntryActionArea
		{
			CLEAATabCtxtMenu,
			CLEAAContactListCtxtMenu,
			CLEAAApplicationMenu,
			CLEAAToolbar,
			CLEAAChatCtxtMenu,
			CLEAAMAX
		};
	private:
		typedef QHash<const QAction*, QList<CLEntryActionArea>> Action2Areas_t;
		Action2Areas_t Action2Areas_;
	public:
		ActionsManager (QObject* = 0);

		QList<QAction*> GetEntryActions (ICLEntry *entry);
		QList<QAction*> CreateEntriesActions (QList<ICLEntry*> entries, QObject *parent);
		QList<CLEntryActionArea> GetAreasForAction (const QAction *action) const;

		void HandleEntryRemoved (ICLEntry*);
	private:
		QString GetReason (const QString& id, const QString& text);
		void ManipulateAuth (const QString& id, const QString& text,
				std::function<void (IAuthable*, const QString&)> func);
		void CreateActionsForEntry (ICLEntry*);
		void UpdateActionsForEntry (ICLEntry*);
	private slots:
		void handleActoredActionTriggered ();

		void handleActionGrantAuthTriggered ();
		void handleActionRevokeAuthTriggered ();
		void handleActionUnsubscribeTriggered ();
		void handleActionRerequestTriggered ();

		void handleActionNotifyChangesState ();
		void handleActionNotifyBecomesOnline ();
	signals:
		void hookEntryActionAreasRequested (LeechCraft::IHookProxy_ptr proxy,
				QObject *action,
				QObject *entry);
		void hookEntryActionsRemoved (LeechCraft::IHookProxy_ptr proxy,
				QObject *entry);
		void hookEntryActionsRequested (LeechCraft::IHookProxy_ptr proxy,
				QObject *entry);
	};
}
}

Q_DECLARE_METATYPE (LeechCraft::Azoth::ActionsManager::CLEntryActionArea);

#endif
