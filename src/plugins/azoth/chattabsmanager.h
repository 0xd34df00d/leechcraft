/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_CHATTABSMANAGER_H
#define PLUGINS_AZOTH_CHATTABSMANAGER_H
#include <QObject>
#include <QHash>
#include <QPersistentModelIndex>
#include "chattab.h"

class QWidget;

namespace LeechCraft
{
namespace Azoth
{
	class ICLEntry;

	class ChatTabsManager : public QObject
	{
		Q_OBJECT

		QSet<QString> StyleParams_;
		QHash<QString, ChatTab_ptr> Entry2Tab_;
		QSet<QString> EverOpened_;

		QPointer<ChatTab> LastCurrentTab_;
	public:
		struct RestoreChatInfo
		{
			QString EntryID_;
			QString Variant_;
			QString MsgText_;
			DynPropertiesList_t Props_;
		};
	private:
		QHash<QString, RestoreChatInfo> RestoreInfo_;
	public:
		ChatTabsManager (QObject* = 0);

		QWidget* OpenChat (const QModelIndex&);
		QWidget* OpenChat (const ICLEntry*, bool fromUser,
				const DynPropertiesList_t& = DynPropertiesList_t ());
		void CloseChat (const ICLEntry*);
		bool IsActiveChat (const ICLEntry*) const;
		bool IsOpenedChat (const QString&) const;
		ChatTab* GetActiveChatTab () const;
		ChatTab* GetChatTab (const QString& entryId) const;

		void UpdateEntryMapping (const QString&, QObject*);

		void HandleEntryAdded (ICLEntry*);
		void HandleEntryRemoved (ICLEntry*);
		void HandleInMessage (IMessage*);

		void SetChatEnabled (const QString&, bool);
		void ChatMadeCurrent (ChatTab*);

		void EnqueueRestoreInfos (const QList<RestoreChatInfo>&);

		QString GetActiveVariant (ICLEntry*) const;
	protected:
		bool eventFilter (QObject*, QEvent*);
	private:
		void UpdateMUCTab (ICLEntry*);
		void RestoreChat (const RestoreChatInfo&, QObject*);
	private slots:
		void handleNeedToClose (ChatTab*);
		void updateCurrentTab (QObject*);
		void handleAddingCLEntryEnd (LeechCraft::IHookProxy_ptr proxy,
				QObject *entry);
		void chatWindowStyleChanged ();
	signals:
		void addNewTab (const QString&, QWidget*);
		void changeTabName (QWidget*, const QString&);
		void changeTabIcon (QWidget*, const QIcon&);
		void removeTab (QWidget*);
		void raiseTab (QWidget*);

		void clearUnreadMsgCount (const QString&);
		void entryMadeCurrent (QObject*);
		void entryLostCurrent (QObject*);
	};
}
}

#endif
