/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "coremessage.h"
#include "dummymsgmanager.h"

namespace LeechCraft
{
namespace Azoth
{
	CoreMessage::CoreMessage (const QString& body, const QDateTime& date,
			MessageType type, Direction dir, QObject* other, QObject *parent)
	: QObject (parent)
	, Type_ (type)
	, Dir_ (dir)
	, Other_ (other)
	, Body_ (body)
	, Date_ (date)
	{
	}

	QObject* CoreMessage::GetQObject ()
	{
		return this;
	}

	void CoreMessage::Send ()
	{
	}

	void CoreMessage::Store ()
	{
		QMetaObject::invokeMethod (OtherPart (),
				"gotMessage",
				Q_ARG (QObject*, this));
		DummyMsgManager::Instance ().AddMessage (this);
	}

	IMessage::Direction CoreMessage::GetDirection () const
	{
		return Dir_;
	}

	IMessage::MessageType CoreMessage::GetMessageType () const
	{
		return Type_;
	}

	IMessage::MessageSubType CoreMessage::GetMessageSubType () const
	{
		return MSTOther;
	}

	QObject* CoreMessage::OtherPart () const
	{
		return Other_;
	}

	QString CoreMessage::GetOtherVariant () const
	{
		return {};
	}

	QString CoreMessage::GetBody () const
	{
		return Body_;
	}

	void CoreMessage::SetBody (const QString& body)
	{
		Body_ = body;
	}

	QDateTime CoreMessage::GetDateTime () const
	{
		return Date_;
	}

	void CoreMessage::SetDateTime (const QDateTime& timestamp)
	{
		Date_ = timestamp;
	}
}
}
