/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "trafficmanager.h"
#include <QStandardItemModel>
#include <QNetworkConfigurationManager>
#include <QNetworkSession>
#include <QTimer>
#include <util/util.h>
#include "core.h"
#include "platformbackend.h"

namespace LeechCraft
{
namespace Lemon
{
	namespace
	{
		class IfacesModel : public QStandardItemModel
		{
		public:
			enum Roles
			{
				IfaceName = Qt::UserRole + 1,
				BearerType,
				IconName,
				UpSpeed,
				UpSpeedPretty,
				DownSpeed,
				DownSpeedPretty,
				MaxUpSpeed,
				MaxDownSpeed
			};

			QHash<int, QByteArray> RoleNames_;

			IfacesModel (QObject *parent)
			: QStandardItemModel (parent)
			{
				RoleNames_ [Roles::IfaceName] = "ifaceName";
				RoleNames_ [Roles::BearerType] = "bearerType";
				RoleNames_ [Roles::IconName] = "iconName";
				RoleNames_ [Roles::UpSpeed] = "upSpeed";
				RoleNames_ [Roles::UpSpeedPretty] = "upSpeedPretty";
				RoleNames_ [Roles::DownSpeed] = "downSpeed";
				RoleNames_ [Roles::DownSpeedPretty] = "downSpeedPretty";
				RoleNames_ [Roles::MaxUpSpeed] = "maxUpSpeed";
				RoleNames_ [Roles::MaxDownSpeed] = "maxDownSpeed";
#ifndef USE_QT5
				setRoleNames (roleNames);
#endif
			}
#ifdef USE_QT5
			QHash<int, QByteArray> roleNames () const override
			{
				return RoleNames_;
			}
#endif
		};
	}

	TrafficManager::TrafficManager (QObject *parent)
	: QObject (parent)
	, Model_ (new IfacesModel (this))
	, ConfManager_ (new QNetworkConfigurationManager (this))
	{
		connect (ConfManager_,
				SIGNAL (configurationAdded (QNetworkConfiguration)),
				this,
				SLOT (addConfiguration (QNetworkConfiguration)));
		connect (ConfManager_,
				SIGNAL (configurationRemoved (QNetworkConfiguration)),
				this,
				SLOT (removeConfiguration (QNetworkConfiguration)));
		connect (ConfManager_,
				SIGNAL (configurationChanged (QNetworkConfiguration)),
				this,
				SLOT (handleConfigChanged (QNetworkConfiguration)));

		ConfManager_->updateConfigurations ();

		for (const auto& conf : ConfManager_->allConfigurations (QNetworkConfiguration::Active))
			addConfiguration (conf);

		auto timer = new QTimer (this);
		connect (timer,
				SIGNAL (timeout ()),
				this,
				SLOT (updateCounters ()));
		timer->start (1000);
	}

	QAbstractItemModel* TrafficManager::GetModel () const
	{
		return Model_;
	}

	QList<qint64> TrafficManager::GetDownHistory (const QString& name) const
	{
		return ActiveInterfaces_ [name].DownSpeeds_;
	}

	QList<qint64> TrafficManager::GetUpHistory (const QString& name) const
	{
		return ActiveInterfaces_ [name].UpSpeeds_;
	}

	int TrafficManager::GetBacktrackSize () const
	{
		return 500;
	}

	namespace
	{
		struct NetIcons
		{
			QMap<QNetworkConfiguration::BearerType, QString> Icons_;

			NetIcons ()
			{
				Icons_ [QNetworkConfiguration::BearerEthernet] = "network-wired";
				Icons_ [QNetworkConfiguration::BearerWLAN] = "network-wireless";
				Icons_ [QNetworkConfiguration::BearerWiMAX] = "network-wireless";

				Icons_ [QNetworkConfiguration::Bearer2G] = "mobile";
				Icons_ [QNetworkConfiguration::BearerCDMA2000] = "mobile";
				Icons_ [QNetworkConfiguration::BearerWCDMA] = "mobile";
				Icons_ [QNetworkConfiguration::BearerHSPA] = "mobile";

				Icons_ [QNetworkConfiguration::BearerUnknown] = "network-workgroup";
			}
		};
	}

	void TrafficManager::addConfiguration (const QNetworkConfiguration& conf)
	{
		static NetIcons icons;

		QNetworkSession_ptr sess (new QNetworkSession (conf, this));
		if (sess->state () != QNetworkSession::Connected)
			return;

		auto iface = sess->interface ();
		const auto& ifaceId = iface.name ();
		const auto& config = sess->configuration ();

		if (!ActiveInterfaces_.contains (ifaceId))
		{
			auto item = new QStandardItem;
			Model_->appendRow (item);

			InterfaceInfo info (item);
			info.Name_ = ifaceId;

			auto backend = Core::Instance ().GetPlatformBackend ();
			if (backend)
			{
				backend->update ({ ifaceId });
				const auto& bytesStats = backend->GetCurrentNumBytes (ifaceId);
				info.PrevRead_ = bytesStats.Down_;
				info.PrevWritten_ = bytesStats.Up_;
			}

			ActiveInterfaces_ [ifaceId] = info;
		}

		auto& info = ActiveInterfaces_ [ifaceId];

		auto item = info.Item_;
		item->setData (iface.humanReadableName (), IfacesModel::Roles::IfaceName);
		item->setData (config.bearerTypeName (), IfacesModel::Roles::BearerType);
		item->setData (icons.Icons_ [config.bearerType ()], IfacesModel::Roles::IconName);
		item->setData (0, IfacesModel::Roles::MaxDownSpeed);
		item->setData (0, IfacesModel::Roles::MaxUpSpeed);

		info.LastSession_ = sess;
	}

	void TrafficManager::removeConfiguration (const QNetworkConfiguration& conf)
	{
		for (const auto& info : ActiveInterfaces_)
		{
			if (info.LastSession_->configuration () != conf)
				continue;

			Model_->removeRow (info.Item_->row ());
			ActiveInterfaces_.remove (info.Name_);
			break;
		}
	}

	void TrafficManager::handleConfigChanged (const QNetworkConfiguration& conf)
	{
		if (conf.state () == QNetworkConfiguration::Active)
			addConfiguration (conf);
		else
			removeConfiguration (conf);
	}

	void TrafficManager::updateCounters ()
	{
		auto backend = Core::Instance ().GetPlatformBackend ();
		if (!backend)
			return;

		backend->update (ActiveInterfaces_.keys ());

		const auto backtrack = GetBacktrackSize ();

		for (auto& info : ActiveInterfaces_)
		{
			const auto& name = info.Name_;

			const auto& bytesStats = backend->GetCurrentNumBytes (name);

			auto updateCounts = [&info, backtrack] (const qint64 now, qint64& prev,
					QList<qint64>& list, IfacesModel::Roles role, const QString& text) -> qint64
			{
				const auto diff = now - prev;

				info.Item_->setData (diff, role);
				info.Item_->setData (text.arg (Util::MakePrettySize (diff)), role + 1);

				list << diff;
				if (list.size () > backtrack)
					list.erase (list.begin ());

				prev = now;
				return diff;
			};

			updateCounts (bytesStats.Down_, info.PrevRead_, info.DownSpeeds_,
					IfacesModel::Roles::DownSpeed, tr ("Download speed: %1/s"));
			updateCounts (bytesStats.Up_, info.PrevWritten_, info.UpSpeeds_,
					IfacesModel::Roles::UpSpeed, tr ("Upload speed: %1/s"));

			auto updateMax = [&info] (const QList<qint64>& speeds, IfacesModel::Roles role)
			{
				const auto max = *std::max_element (speeds.begin (), speeds.end ());
				info.Item_->setData (max, role);
			};
			updateMax (info.DownSpeeds_, IfacesModel::Roles::MaxDownSpeed);
			updateMax (info.UpSpeeds_, IfacesModel::Roles::MaxUpSpeed);
		}

		emit updated ();
	}
}
}
