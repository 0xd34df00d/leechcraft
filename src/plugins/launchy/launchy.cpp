/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "launchy.h"
#include <QIcon>
#include <QAction>
#include <util/util.h>
#include <util/sys/paths.h>
#include <util/shortcuts/shortcutmanager.h>
#include <util/xdg/itemtypes.h>
#include <util/xdg/itemsdatabase.h>
#include "fsdisplayer.h"
#include "favoritesmanager.h"
#include "quarkmanager.h"
#include "itemimageprovider.h"
#include "recentmanager.h"

namespace LeechCraft
{
namespace Launchy
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Util::InstallTranslator ("launchy");

		Proxy_ = proxy;

		Finder_ = new Util::XDG::ItemsDatabase (proxy,
				{
					Util::XDG::Type::Application,
					Util::XDG::Type::Dir,
					Util::XDG::Type::URL
				});

		FavManager_ = new FavoritesManager;
		RecentManager_ = new RecentManager;

		ShortcutMgr_ = new Util::ShortcutManager (proxy, this);
		ShortcutMgr_->SetObject (this);

		FSLauncher_ = new QAction (tr ("Open fullscreen launcher..."), this);
		FSLauncher_->setProperty ("ActionIcon", "system-run");
		FSLauncher_->setShortcut (QString ("Meta+R"));
		connect (FSLauncher_,
				SIGNAL (triggered ()),
				this,
				SLOT (handleFSRequested ()));

		ShortcutMgr_->RegisterAction ("FSLauncher", FSLauncher_, true);

		auto itemImageProv = new ItemImageProvider;
		auto quarkMgr = new QuarkManager (proxy, FavManager_, Finder_, itemImageProv);

		LaunchQuark_.reset (new QuarkComponent ("launchy", "LaunchyQuark.qml"));
		LaunchQuark_->DynamicProps_.push_back ({ "Launchy_itemModel", quarkMgr->GetModel () });
		LaunchQuark_->DynamicProps_.push_back ({ "Launchy_proxy", quarkMgr });
		LaunchQuark_->ImageProviders_.push_back ({ "LaunchyItemIcons", itemImageProv });
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Launchy";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "Launchy";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Neat application launcher for LeechCraft.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	QList<QAction*> Plugin::GetActions (ActionsEmbedPlace aep) const
	{
		QList<QAction*> result;
		if (aep == ActionsEmbedPlace::LCTray)
			result << FSLauncher_;
		return result;
	}

	QMap<QString, ActionInfo> Plugin::GetActionInfo () const
	{
		return ShortcutMgr_->GetActionInfo ();
	}

	void Plugin::SetShortcut (const QString& id, const QKeySequences_t& sequences)
	{
		ShortcutMgr_->SetShortcut (id, sequences);
	}

	QuarkComponents_t Plugin::GetComponents () const
	{
		return { LaunchQuark_ };
	}

	void Plugin::handleFSRequested ()
	{
		auto dis = new FSDisplayer (Proxy_, Finder_, FavManager_, RecentManager_, this);
		connect (dis,
				SIGNAL (gotEntity (LeechCraft::Entity)),
				this,
				SIGNAL (gotEntity (LeechCraft::Entity)));
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_launchy, LeechCraft::Launchy::Plugin);
