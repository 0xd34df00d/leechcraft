/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "bugreportpage.h"
#include <QtDebug>
#include <util/sysinfo.h>
#include "reportwizard.h"

namespace LeechCraft
{
namespace Dolozhee
{
	BugReportPage::BugReportPage (ICoreProxy_ptr proxy, QWidget *parent)
	: QWizardPage (parent)
	, Proxy_ (proxy)
	{
		Ui_.setupUi (this);

		connect (Ui_.Title_,
				SIGNAL (textChanged (QString)),
				this,
				SIGNAL (completeChanged ()));

		auto list = { Ui_.ShortDesc_, Ui_.AR_, Ui_.STR_ };
		Q_FOREACH (auto edit, list)
			connect (edit,
					SIGNAL (textChanged ()),
					this,
					SIGNAL (completeChanged ()));
	}

	int BugReportPage::nextId () const
	{
		return ReportWizard::PageID::FilePage;
	}

	bool BugReportPage::isComplete () const
	{
		return !GetTitle ().isEmpty () &&
			!Ui_.ShortDesc_->toPlainText ().isEmpty () &&
			!Ui_.AR_->toPlainText ().isEmpty () &&
			!Ui_.STR_->toPlainText ().isEmpty ();
	}

	QString BugReportPage::GetTitle () const
	{
		return Ui_.Title_->text ();
	}

	namespace
	{
		QString GetFormattedVersionString (ICoreProxy_ptr proxy)
		{
			return QString ("LeechCraft ") + proxy->GetVersion () + "\n" +
					QString ("Built with Qt %1, running with Qt %2\n")
							.arg (QT_VERSION_STR)
							.arg (qVersion ()) +
					QString ("Running on: %1\n")
							.arg (Util::SysInfo::GetOSName ());
		}
	}

	QString BugReportPage::GetText () const
	{
		QString result = Ui_.ShortDesc_->toPlainText () + "\n\n";
		result += "*Expected result:*\n" + Ui_.ER_->toPlainText () + "\n\n";
		result += "*Actual result:*\n" + Ui_.AR_->toPlainText () + "\n\n";
		result += "*STR:*\n" + Ui_.STR_->toPlainText () + "\n\n";

		result += "*System information:*\n";
		result += GetFormattedVersionString (Proxy_);

		return result;
	}

	QList<QPair<QString, QString>> BugReportPage::GetReportSections () const
	{
		QList<QPair<QString, QString>> result;

		result.append ({ "Short description", Ui_.ShortDesc_->toPlainText () });
		result.append ({ "Expected result", Ui_.ER_->toPlainText () });
		result.append ({ "Actual result", Ui_.AR_->toPlainText () });
		result.append ({ "STR", Ui_.STR_->toPlainText () });
		result.append ({ "System information", GetFormattedVersionString (Proxy_) });

		return result;
	}
}
}
