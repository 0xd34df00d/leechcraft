/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QStringList>
#include <QMetaType>
#include <QFile>
#include <QtPlugin>

namespace LeechCraft
{
namespace LMP
{
	struct UnmountablePartition
	{
		QByteArray ID_;
		QString Name_;
		quint64 AvailableSize_;
		quint64 TotalSize_;
	};

	struct UnmountableDevInfo
	{
		QByteArray ID_;

		QString Manufacturer_;
		QString Name_;

		QList<UnmountablePartition> Partitions_;
		QStringList SupportedFormats_;

		inline bool operator== (const UnmountableDevInfo& other) const
		{
			return ID_ == other.ID_;
		}
	};

	typedef QList<UnmountableDevInfo> UnmountableDevInfos_t;

	struct UnmountableFileInfo
	{
		QString FileFormat_;

		int TrackNumber_;
		QString TrackTitle_;

		QString Artist_;
		QString Album_;
		int AlbumYear_;

		QString AlbumArtPath_;

		QStringList Genres_;
	};

	class IUnmountableSync
	{
	public:
		virtual ~IUnmountableSync () {}

		virtual UnmountableDevInfos_t AvailableDevices () const = 0;

		virtual QString GetSyncSystemName () const = 0;

		virtual QObject* GetQObject () = 0;

		virtual void SetFileInfo (const QString& origLocalPath, const UnmountableFileInfo& info) = 0;

		virtual void Upload (const QString& localPath, const QString& origLocalPath,
				const QByteArray& devId, const QByteArray& storageId) = 0;

		virtual void Refresh () = 0;
	protected:
		virtual void availableDevicesChanged () = 0;

		virtual void uploadProgress (qint64, qint64) = 0;

		virtual void uploadFinished (const QString&, QFile::FileError, const QString&) = 0;
	};
}
}

Q_DECLARE_METATYPE (LeechCraft::LMP::UnmountableDevInfo)
Q_DECLARE_INTERFACE (LeechCraft::LMP::IUnmountableSync, "org.LeechCraft.LMP.IUnmountableSync/1.0");
