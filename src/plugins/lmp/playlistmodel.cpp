/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "playlistmodel.h"
#include <QMimeData>
#include <QFileInfo>
#include "playlistparsers/playlistfactory.h"
#include "player.h"
#include "util.h"

namespace LeechCraft
{
namespace LMP
{
	PlaylistModel::PlaylistModel (Player *parent)
	: QStandardItemModel (parent)
	, Player_ (parent)
	{
		setSupportedDragActions (Qt::CopyAction | Qt::MoveAction);
	}

	QStringList PlaylistModel::mimeTypes () const
	{
		return QStringList ("text/uri-list");
	}

	QMimeData* PlaylistModel::mimeData (const QModelIndexList& indexes) const
	{
		QList<QUrl> urls;
		for (const auto& index : indexes)
		{
			const auto& sources = Player_->GetIndexSources (index);
			std::transform (sources.begin (), sources.end (), std::back_inserter (urls),
					[] (decltype (sources.front ()) source)
						{ return source.ToUrl (); });
		}
		urls.removeAll (QUrl ());

		QMimeData *result = new QMimeData;
		result->setUrls (urls);
		return result;
	}

	bool PlaylistModel::dropMimeData (const QMimeData *data,
			Qt::DropAction action, int row, int, const QModelIndex& parent)
	{
		if (action == Qt::IgnoreAction)
			return true;

		if (!data->hasUrls ())
			return false;

		const auto& urls = data->urls ();
		QList<AudioSource> sources;
		for (const auto& url : urls)
		{
			if (url.scheme () != "file")
			{
				sources << AudioSource (url);
				continue;
			}

			const auto& localPath = url.toLocalFile ();
			if (QFileInfo (localPath).isFile ())
			{
				bool playlistHandled = false;
				if (auto f = MakePlaylistParser (localPath))
				{
					const auto& playlistSrcs = f (localPath);
					if (!playlistSrcs.isEmpty ())
					{
						playlistHandled = true;
						sources += playlistSrcs;
					}
				}

				if (!playlistHandled)
					sources << AudioSource (localPath);
				continue;
			}

			for (const auto& path : RecIterate (localPath, true))
				sources << AudioSource (path);
		}

		auto afterIdx = row >= 0 ?
				parent.child (row, 0) :
				parent;
		const auto& firstSrc = afterIdx.isValid () ?
				Player_->GetIndexSources (afterIdx).value (0) :
				AudioSource ();

		auto existingQueue = Player_->GetQueue ();
		for (const auto& src : sources)
		{
			auto remPos = std::remove (existingQueue.begin (), existingQueue.end (), src);
			existingQueue.erase (remPos, existingQueue.end ());
		}

		auto pos = std::find (existingQueue.begin (), existingQueue.end (), firstSrc);
		if (pos == existingQueue.end ())
			existingQueue << sources;
		else
		{
			for (const auto& src : sources)
				pos = existingQueue.insert (pos, src) + 1;
		}

		Player_->ReplaceQueue (existingQueue);
		return true;
	}

	Qt::DropActions PlaylistModel::supportedDropActions () const
	{
		return Qt::CopyAction | Qt::MoveAction;
	}
}
}
