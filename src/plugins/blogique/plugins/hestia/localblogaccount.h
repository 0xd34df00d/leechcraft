/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include <interfaces/blogique/iaccount.h>

namespace LeechCraft
{
namespace Blogique
{
namespace Hestia
{
	class AccountStorage;
	class AccountConfigurationWidget;
	class LocalBloggingPlatform;

	class LocalBlogAccount : public QObject
							, public IAccount
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::Blogique::IAccount)

		LocalBloggingPlatform *ParentBloggingPlatform_;
		QString Name_;
		bool IsValid_;
		QString DatabasePath_;
		AccountStorage *AccountStorage_;

		QAction *LoadAllEvents_;

		const int DefaultPostsNumber_;

	public:
		LocalBlogAccount (const QString& name, QObject *parent = 0);

		QObject* GetQObject ();
		QObject* GetParentBloggingPlatform () const;
		QString GetAccountName () const;
		QString GetOurLogin () const;
		void RenameAccount (const QString& name);
		QByteArray GetAccountID () const;
		void OpenConfigurationDialog ();

		bool IsValid () const;
		QObject* GetProfile ();

		void RemoveEntry (const Entry& entry);
		void UpdateEntry (const Entry& entry);
		QList<QAction*> GetUpdateActions () const;

		void RequestLastEntries (int count = 0);
		void RequestStatistics ();
		void RequestTags ();
		void GetEntriesByDate (const QDate& date);

		QHash<QString, int> GetTags () const;

		void FillSettings (AccountConfigurationWidget *widget);
		void Init ();

		QByteArray Serialize () const;
		static LocalBlogAccount* Deserialize (const QByteArray& data, QObject *parent);
	private:
		void Validate ();

	public slots:
		void updateProfile ();
		void submit (const Entry& event);
		void backup ();

		void handleLoadAllEvents ();

	signals:
		void accountRenamed (const QString& newName);
		void accountSettingsChanged ();
		void accountValidated (bool validated);

		void requestEntriesBegin ();

		void entryPosted (const QList<Entry>& entries);
		void entryRemoved (int itemId);
		void entryUpdated (const QList<Entry>& entries);

		void gotEntries (const QList<Entry>& entries);
		void gotEntries2Backup (const QList<Entry>& entries);
		void gettingEntries2BackupFinished ();
		void gotBlogStatistics (const QMap<QDate, int>& statistics);
		void tagsUpdated (const QHash<QString, int>& tags);

	};
}
}
}

