/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "selectgroupsdialog.h"
#include <QStandardItemModel>
#include <QtDebug>
#include "ljprofile.h"

namespace LeechCraft
{
namespace Blogique
{
namespace Metida
{
	SelectGroupsDialog::SelectGroupsDialog (LJProfile *profile, quint32 allowMask,
			QWidget *parent)
	: QDialog (parent)
	, Model_ (new QStandardItemModel (this))
	{
		Ui_.setupUi (this);

		Ui_.Groups_->setModel (Model_);
		Model_->setHorizontalHeaderLabels ({ tr ("Group") });

		for (const auto& group : profile->GetProfileData ().FriendGroups_)
		{
			QStandardItem *item = new QStandardItem (group.Name_);
			item->setData (group.Id_);
			item->setCheckable (true);
			if (allowMask & 1 << group.Id_)
				item->setCheckState (Qt::Checked);
			Model_->appendRow (item);
		}
	}

	QList<uint> SelectGroupsDialog::GetSelectedGroupsIds () const
	{
		QList<uint> result;
		for (int i = 0; i < Model_->rowCount (); ++i)
			if (Model_->item (i)->checkState () == Qt::Checked)
				result << Model_->item (i)->data ().toUInt ();

		return result;
	}

	void SelectGroupsDialog::SetHeaderLabel (const QString& text)
	{
		Ui_.DialogHeaderLabel_->setText (text);
	}

}
}
}

