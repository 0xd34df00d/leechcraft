/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include <memory>
#include "ljaccount.h"
#include <QtDebug>
#include <util/passutils.h>
#include <util/util.h>
#include <util/notificationactionhandler.h>
#include "core.h"
#include "ljaccountconfigurationwidget.h"
#include "ljaccountconfigurationdialog.h"
#include "ljbloggingplatform.h"
#include "ljprofile.h"
#include "ljxmlrpc.h"
#include "profilewidget.h"
#include "utils.h"
#include "xmlsettingsmanager.h"
#include "updatetypedialog.h"
#include "localstorage.h"

namespace LeechCraft
{
namespace Blogique
{
namespace Metida
{
	LJAccount::LJAccount (const QString& name, QObject *parent)
	: QObject (parent)
	, ParentBloggingPlatform_ (qobject_cast<LJBloggingPlatform*> (parent))
	, LJXmlRpc_ (new LJXmlRPC (this, this))
	, Name_ (name)
	, IsValid_ (false)
	, LJProfile_ (std::make_shared<LJProfile> (this))
	, LoadLastEvents_ (new QAction (tr ("Last entries"), this))
	, LoadChangedEvents_ (new QAction (tr ("Changed entries"), this))
	, LastUpdateType_ (LastUpdateType::LastEntries)
	{
		qRegisterMetaType<LJProfileData> ("LJProfileData");
		qRegisterMetaTypeStreamOperators<QList<LJFriendGroup>> ("QList<LJFriendGroup>");
		qRegisterMetaTypeStreamOperators<QList<LJMood>> ("QList<LJMood>");

		connect (LJXmlRpc_,
				SIGNAL (validatingFinished (bool)),
				this,
				SLOT (handleValidatingFinished (bool)));
		connect (LJXmlRpc_,
				SIGNAL (error (int, QString, QString)),
				this,
				SIGNAL (gotError (int, QString, QString)));
		connect (LJXmlRpc_,
				SIGNAL (networkError (int, QString)),
				this,
				SIGNAL (gotError (int, QString)));
		connect (LJXmlRpc_,
				SIGNAL (profileUpdated (LJProfileData)),
				LJProfile_.get (),
				SLOT (handleProfileUpdate (LJProfileData)));
		connect (LJXmlRpc_,
				SIGNAL (gotTags (QHash<QString, int>)),
				LJProfile_.get (),
				SLOT (handleGotTags (QHash<QString, int>)));
		connect (LJProfile_.get (),
				SIGNAL (tagsUpdated (QHash<QString, int>)),
				this,
				SIGNAL (tagsUpdated (QHash<QString, int>)));
		connect (LJXmlRpc_,
				SIGNAL (eventPosted (QList<LJEvent>)),
				this,
				SLOT (handleEventPosted (QList<LJEvent>)));
		connect (LJXmlRpc_,
				SIGNAL (eventRemoved (int)),
				this,
				SLOT (handleEventRemoved (int)));
		connect (LJXmlRpc_,
				SIGNAL (eventUpdated (QList<LJEvent>)),
				this,
				SLOT (handleEventUpdated (QList<LJEvent>)));
		connect (LJXmlRpc_,
				SIGNAL (gotFilteredEvents (QList<LJEvent>)),
				this,
				SLOT (handleGotFilteredEvents (QList<LJEvent>)));
		connect (LJXmlRpc_,
				SIGNAL (gettingFilteredEventsFinished ()),
				this,
				SLOT (handleGettingFilteredEventsFinished ()));
		connect (LJXmlRpc_,
				SIGNAL (gotEvents (QList<LJEvent>)),
				this,
				SLOT (handleGotEvents (QList<LJEvent>)));
		connect (LJXmlRpc_,
				SIGNAL (gotStatistics (QMap<QDate, int>)),
				this,
				SIGNAL (gotBlogStatistics (QMap<QDate, int>)));
		connect (LJXmlRpc_,
				SIGNAL (unreadMessagesExist (bool)),
				this,
				SLOT (handleUnreadMessagesExist (bool)));
		connect (LJXmlRpc_,
				SIGNAL (gotRecentComments (QList<LJCommentEntry>)),
				this,
				SIGNAL (gotRecentComments (QList<LJCommentEntry>)));

		connect (LoadLastEvents_,
				SIGNAL (triggered ()),
				this,
				SLOT (handleLoadLastEvents ()));
		connect (LoadChangedEvents_,
				SIGNAL (triggered ()),
				this,
				SLOT (handleLoadChangedEvents ()));
	}

	QObject* LJAccount::GetQObject ()
	{
		return this;
	}

	QObject* LJAccount::GetParentBloggingPlatform () const
	{
		return ParentBloggingPlatform_;
	}

	QString LJAccount::GetAccountName () const
	{
		return Name_;
	}

	QString LJAccount::GetOurLogin () const
	{
		return Login_;
	}

	void LJAccount::RenameAccount (const QString&)
	{
	}

	QByteArray LJAccount::GetAccountID () const
	{
		return ParentBloggingPlatform_->GetBloggingPlatformID () + "_" +
				Login_.toUtf8();
	}

	void LJAccount::OpenConfigurationDialog ()
	{
		std::unique_ptr<LJAccountConfigurationDialog> dia (new LJAccountConfigurationDialog (0));

		if (!Login_.isEmpty ())
			dia->ConfWidget ()->SetLogin (Login_);

		dia->ConfWidget ()->SetPassword (GetPassword ());

		if (dia->exec () == QDialog::Rejected)
			return;

		FillSettings (dia->ConfWidget ());
	}

	bool LJAccount::IsValid () const
	{
		return IsValid_;
	}

	QString LJAccount::GetPassword () const
	{
		QString key ("org.LeechCraft.Blogique.PassForAccount/" + GetAccountID ());
		return Util::GetPassword (key, QString (), &Core::Instance ());
	}

	QObject* LJAccount::GetProfile ()
	{
		return LJProfile_.get ();
	}

	void LJAccount::GetEntriesByDate (const QDate& date)
	{
		LJXmlRpc_->GetEventsByDate (date);
	}

	void LJAccount::GetEntriesWithFilter (const Filter& filter)
	{
		LJXmlRpc_->GetEventsWithFilter (filter);
	}

	namespace
	{
		LJEventProperties GetLJEventPropetriesFromMap (const QVariantMap& map)
		{
			LJEventProperties props;
			props.AdultContent_ = static_cast<AdultContent> (map ["adults"].toInt ());
			props.CommentsManagement_ = static_cast<CommentsManagement> (map ["comment"].toInt ());
			props.CurrentLocation_ = map ["place"].toString ();
			props.CurrentMood_ = map ["mood"].toString ();
			props.CurrentMoodId_ = map ["moodId"].toInt ();
			props.CurrentMusic_ = map ["music"].toString ();
			props.ScreeningComments_ = static_cast<CommentsManagement> (map ["hidecomment"].toInt ());
			props.PostAvatar_ = map ["avatar"].toString ();
			props.ShowInFriendsPage_ = map ["showInFriendsPage"].toBool ();
			props.LikeButtons_ = map ["likes"].toStringList ();
			return props;
		}


		QString ToLJTags (const QString& content)
		{
			QRegExp rexpOpen ("<lj-poll name=\"(.+)\">\\s*</lj-poll>");
			rexpOpen.setMinimal (true);
			QString entry = content;
			entry.replace (rexpOpen, "<lj-poll-\\1></lj-poll-\\1>");
			return entry;
		}

		LJEvent Entry2LJEvent (const Entry& entry)
		{
			LJEvent ljEvent;
			ljEvent.ItemID_ = entry.EntryId_;
			ljEvent.Event_ = ToLJTags (entry.Content_);
			ljEvent.DateTime_ = entry.Date_;
			ljEvent.Subject_ = entry.Subject_;
			ljEvent.Tags_ = entry.Tags_;
			ljEvent.AllowMask_ = entry.PostOptions_ ["allowMask"].toUInt ();
			ljEvent.Security_ = static_cast<Access> (entry.PostOptions_ ["access"].toInt ());
			ljEvent.Props_ = GetLJEventPropetriesFromMap (entry.PostOptions_);

			return ljEvent;
		}

		QVariantMap GetPostOptionsMapFromLJEvent (const LJEvent& event)
		{
			QVariantMap map;
			map ["access"] = event.Security_;
			map ["allowMask"] = event.AllowMask_;
			map ["adults"] = event.Props_.AdultContent_;
			map ["comment"] = event.Props_.CommentsManagement_;
			map ["hidecomment"] = event.Props_.ScreeningComments_;
			map ["place"] = event.Props_.CurrentLocation_;
			map ["music"] = event.Props_.CurrentMusic_;
			map ["moodId"] = event.Props_.CurrentMoodId_;
			map ["mood"] = event.Props_.CurrentMood_;
			map ["showInFriendsPage"] = event.Props_.ShowInFriendsPage_;
			map ["avatar"] = event.Props_.PostAvatar_;

			return map;
		}

		QString FromLJTags (const QString& content)
		{
			QRegExp rexpOpen ("<lj-poll-(.+)>");
			QRegExp rexpClose ("</lj-poll-(.+)>");
			rexpOpen.setMinimal (true);
			rexpClose.setMinimal (true);
			QString entry = content;
			if (rexpClose.indexIn (entry) != -1)
			{
				entry.replace (rexpOpen, "<lj-poll name=\"\\1\">");
				entry.replace (rexpClose, "</lj-poll>");
			}
			else
				entry.replace (rexpOpen, "<lj-poll name=\"\\1\" />");

			return entry;
		}

		Entry LJEvent2Entry (const LJEvent& ljEvent, const QString& login)
		{
			Entry entry;
			entry.EntryId_ = ljEvent.ItemID_;
			entry.Content_ = QString ("<div>%1</div>")
					.arg (FromLJTags (ljEvent.Event_));
			entry.Date_ = ljEvent.DateTime_;
			entry.Subject_ = ljEvent.Subject_;
			entry.Tags_ = ljEvent.Tags_;
			entry.Target_ = login;
			entry.EntryUrl_ = ljEvent.Props_.IsRepost_ ?
				ljEvent.Props_.RepostUrl_ :
				ljEvent.Url_;
			entry.PostOptions_ = GetPostOptionsMapFromLJEvent (ljEvent);
			return entry;
		}
	}

	void LJAccount::RemoveEntry (const Entry& entry)
	{
		LJXmlRpc_->RemoveEvent (Entry2LJEvent (entry));
	}

	void LJAccount::UpdateEntry (const Entry& entry)
	{
		LJXmlRpc_->UpdateEvent (Entry2LJEvent (entry));
	}

	void LJAccount::RequestLastEntries (int count)
	{
		emit requestEntriesBegin ();
		LJXmlRpc_->GetLastEvents (count);
	}

	void LJAccount::RequestStatistics ()
	{
		LJXmlRpc_->RequestStatistics ();
	}

	void LJAccount::RequestTags ()
	{
		LJXmlRpc_->RequestTags ();
	}

	void LJAccount::RequestInbox ()
	{
		LJXmlRpc_->RequestLastInbox ();
	}

	void LJAccount::RequestRecentComments ()
	{
		LJXmlRpc_->RequestRecentCommments ();
	}

	QList<QAction*> LJAccount::GetUpdateActions () const
	{
		return { LoadLastEvents_, LoadChangedEvents_ };
	}

	void LJAccount::FillSettings (LJAccountConfigurationWidget *widget)
	{
		Login_ = widget->GetLogin ();
		const QString& pass = widget->GetPassword ();
		if (!pass.isNull ())
			Util::SavePassword (pass,
					"org.LeechCraft.Blogique.PassForAccount/" + GetAccountID (),
					&Core::Instance ());

		emit accountSettingsChanged ();
		Validate ();
	}

	QByteArray LJAccount::Serialize () const
	{
		quint16 ver = 2;
		QByteArray result;
		{
			QDataStream ostr (&result, QIODevice::WriteOnly);
			ostr << ver
					<< Name_
					<< Login_
					<< IsValid_
					<< LJProfile_->GetProfileData ();
		}

		return result;
	}

	LJAccount* LJAccount::Deserialize (const QByteArray& data, QObject *parent)
	{
		quint16 ver = 0;
		QDataStream in (data);
		in >> ver;

		if (ver > 2 ||
				ver < 1)
		{
			qWarning () << Q_FUNC_INFO
					<< "unknown version"
					<< ver;
			return 0;
		}

		QString name;
		in >> name;
		LJAccount *result = new LJAccount (name, parent);
		in >> result->Login_
				>> result->IsValid_;

		if (ver == 2)
		{
			LJProfileData profile;
			in >> profile;
			result->LJProfile_->handleProfileUpdate (profile);
		}

		return result;
	}

	void LJAccount::Validate ()
	{
		LJXmlRpc_->Validate (Login_, GetPassword ());
	}

	void LJAccount::Init ()
	{
		connect (this,
				SIGNAL (accountValidated (bool)),
				ParentBloggingPlatform_,
				SLOT (handleAccountValidated (bool)));

		connect (this,
				SIGNAL (accountSettingsChanged ()),
				ParentBloggingPlatform_,
				SLOT (saveAccounts ()));
	}

	void LJAccount::AddFriends (const QList<LJFriendEntry_ptr>& friends)
	{
		LJProfile_->AddFriends (friends);
	}

	void LJAccount::AddNewFriend (const QString& username,
			const QString& bgcolor, const QString& fgcolor, uint groupId)
	{
		LJXmlRpc_->AddNewFriend (username, bgcolor, fgcolor, groupId);
	}

	void LJAccount::DeleteFriend (const QString& username)
	{
		LJXmlRpc_->DeleteFriend (username);
	}

	void LJAccount::AddGroup (const QString& name, bool isPublic, int id)
	{
		LJXmlRpc_->AddGroup (name, isPublic, id);
	}

	void LJAccount::DeleteGroup (int id)
	{
		LJXmlRpc_->DeleteGroup (id);
	}

	void LJAccount::CallLastUpdateMethod ()
	{
		switch (LastUpdateType_)
		{
		case LastUpdateType::LastEntries:
			emit requestEntriesBegin ();
			LJXmlRpc_->GetLastEvents (XmlSettingsManager::Instance ()
					.Property ("LoadEntriesToView", 20).toInt ());
			break;
		case LastUpdateType::ChangedEntries:
			emit requestEntriesBegin ();
			LJXmlRpc_->GetChangedEvents (XmlSettingsManager::Instance ()
					.Property ("ChangedDateToView",
							QDateTime ({ 1980, 1, 1 }, { 0, 0 })).toDateTime ());
			break;
		case LastUpdateType::NoType:
		default:
			break;
		}
	}

	void LJAccount::handleValidatingFinished (bool success)
	{
		IsValid_ = success;
		qDebug () << Q_FUNC_INFO
				<< "account"
				<< GetAccountID ()
				<< "validating result is"
				<< IsValid_;

		emit accountValidated (IsValid_);
		emit accountSettingsChanged ();
	}

	void LJAccount::updateProfile ()
	{
		LJXmlRpc_->UpdateProfileInfo ();
	}

	void LJAccount::submit (const Entry& entry)
	{
		LJEventProperties props;
		const QVariantMap& postOptions = entry.PostOptions_;

		LJEvent ljEvent = Entry2LJEvent (entry);

		Access access = static_cast<Access> (postOptions.value ("access").toInt ());
		ljEvent.Security_ = access < Access::MAXAccess ?
			access :
			Access::Public;
		if (access == Access::Custom)
			ljEvent.AllowMask_ = postOptions ["allowMask"].toUInt ();

		AdultContent adultContent = static_cast<AdultContent> (postOptions
				.value ("adults").toInt ());
		props.AdultContent_ = adultContent < AdultContent::MAXAdult ?
			adultContent :
			AdultContent::WithoutAdultContent;

		CommentsManagement managment, screening;
		managment = static_cast<CommentsManagement> (postOptions
				.value ("comment").toInt ());
		screening =  static_cast<CommentsManagement> (postOptions
				.value ("hidecomment").toInt ());

		props.CommentsManagement_ = managment < CommentsManagement::MAXManagment ?
			managment :
			CommentsManagement::Default;
		props.ScreeningComments_ = screening > CommentsManagement::MAXManagment &&
				screening < CommentsManagement::MAXScreening ?
			screening :
			CommentsManagement::ShowComments;

		props.CurrentLocation_ = postOptions.value ("place").toString ();
		props.CurrentMusic_ = postOptions.value ("music").toString ();

		props.CurrentMoodId_ = postOptions.value ("moodId", -1).toInt ();
		if (props.CurrentMoodId_ == -1)
			props.CurrentMood_ = postOptions.value ("mood").toString ();

		props.ShowInFriendsPage_ = postOptions.value ("showInFriendsPage").toBool ();

		props.PostAvatar_ = postOptions.value ("avatar").toString ();
		props.LikeButtons_ = postOptions.value ("likes").toStringList ();

		ljEvent.Props_ = props;
		ljEvent.Event_.append ("\n<em style=\"font-size: 0.8em;\">Posted via <a href=\"http://leechcraft.org/plugins-blogique\">LeechCraft Blogique</a>.</em>");

		QRegExp rxp ("(<lj-like.+(buttons=\"((\\w+,?)+)\"\\s?)?\\/?>).+(</lj-like>)?", Qt::CaseInsensitive);
		QString buttons = QString ("<lj-like buttons=\"%1\" />")
				.arg (props.LikeButtons_.join (","));
		if (rxp.indexIn (entry.Content_) != -1)
			ljEvent.Event_.replace (rxp, buttons);
		else if (!ljEvent.Props_.LikeButtons_.isEmpty ())
		{
			if (XmlSettingsManager::Instance ().Property ("LikeButtonPosition", "bottom").toString () == "top")
				ljEvent.Event_.prepend (buttons);
			else
				ljEvent.Event_.append (buttons);
		}

		LJXmlRpc_->Submit (ljEvent);
	}

	void LJAccount::preview (const Entry& event)
	{
		LJXmlRpc_->Preview (Entry2LJEvent (event));
	}

	void LJAccount::handleEventPosted (const QList<LJEvent>& events)
	{
		QList<Entry> entries;
		for (const auto& ljEvent : events)
			entries << LJEvent2Entry (ljEvent, Login_);

		emit entryPosted (entries);
		CallLastUpdateMethod ();
	}

	void LJAccount::handleEventUpdated (const QList<LJEvent>& events)
	{
		QList<Entry> entries;
		for (const auto& ljEvent : events)
			entries << LJEvent2Entry (ljEvent, Login_);

		emit entryUpdated (entries);
		CallLastUpdateMethod ();
	}

	void LJAccount::handleEventRemoved (int id)
	{
		emit entryRemoved (id);
		CallLastUpdateMethod ();
	}

	void LJAccount::handleGotFilteredEvents (const QList<LJEvent>& ljEvents)
	{
		QList<Entry> entries;
		for (const auto& ljEvent : ljEvents)
			entries << LJEvent2Entry (ljEvent, Login_);

		emit gotFilteredEntries (entries);
	}

	void LJAccount::handleGettingFilteredEventsFinished ()
	{
		emit gettingFilteredEntriesFinished ();
	}

	void LJAccount::handleGotEvents (const QList<LJEvent>& ljEvents)
	{
		QList<Entry> entries;
		for (const auto& ljEvent : ljEvents)
			entries << LJEvent2Entry (ljEvent, Login_);

		emit gotEntries (entries);
	}

	void LJAccount::handleLoadLastEvents ()
	{
		int count = 0;
		if (XmlSettingsManager::Instance ().Property ("LoadLastAsk", true).toBool ())
		{
			UpdateTypeDialog dlg (UpdateTypeDialog::LoadType::LoadLastEvents);
			if (dlg.exec () == QDialog::Rejected)
				return;
			count = dlg.GetCount ();
		}

		LastUpdateType_ = LastUpdateType::LastEntries;
		emit requestEntriesBegin ();
		LJXmlRpc_->GetLastEvents (count);
	}

	void LJAccount::handleLoadChangedEvents ()
	{
		QDateTime dt;
		if (XmlSettingsManager::Instance ().Property ("LoadChangedAsk", true).toBool ())
		{
			UpdateTypeDialog dlg (UpdateTypeDialog::LoadType::LoadChangesEvents);
			if (dlg.exec () == QDialog::Rejected)
				return;
			dt = dlg.GetDateTime ();
		}

		LastUpdateType_ = LastUpdateType::ChangedEntries;
		emit requestEntriesBegin ();
		LJXmlRpc_->GetChangedEvents (dt);
	}

	void LJAccount::handleUnreadMessagesExist (bool exists)
	{
		if (exists)
		{
			Entity e = Util::MakeNotification ("Blogique Metida",
					tr ("You have unread messages in account %1")
							.arg ("<em>" + GetAccountName () + "</em>"),
					Priority::PInfo_);
			Util::NotificationActionHandler *nh =
					new Util::NotificationActionHandler (e, this);
			nh->AddFunction (tr ("Open inbox"),
					[this] ()
					{
						Entity urlEntity = Util::MakeEntity (QUrl ("http://livejournal.com/inbox/"),
								QString (),
								static_cast<TaskParameters> (OnlyHandle | FromUserInitiated));
						Core::Instance ().SendEntity (urlEntity);
					});
			nh->AddDependentObject (this);
			Core::Instance ().SendEntity (e);
		}
	}

}
}
}
