/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include <interfaces/blogique/ibloggingplatform.h>

namespace LeechCraft
{
namespace Blogique
{
namespace Metida
{
	class LJAccount;

	class LJBloggingPlatform: public QObject
							, public IBloggingPlatform
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::Blogique::IBloggingPlatform)

		QObject *ParentBlogginPlatfromPlugin_;
		QObject *PluginProxy_;
		QList<LJAccount*> LJAccounts_;

		QAction *LJUser_;
		QAction *LJPoll_;
		QAction *LJCut_;
		QAction *FirstSeparator_;

		QTimer *MessageCheckingTimer_;
		QTimer *CommentsCheckingTimer_;

		enum BloqiqueSidePosition
		{
			First,
			Second
		};
	public:
		LJBloggingPlatform (QObject *parent = 0);

		QObject* GetQObject ();
		BloggingPlatfromFeatures GetFeatures () const;
		QObjectList GetRegisteredAccounts ();
		QObject* GetParentBloggingPlatformPlugin () const;
		QString GetBloggingPlatformName () const;
		QIcon GetBloggingPlatformIcon () const;
		QByteArray GetBloggingPlatformID () const;

		QList<QWidget*> GetAccountRegistrationWidgets (AccountAddOptions);
		void RegisterAccount (const QString& name, const QList<QWidget*>& widgets);
		void RemoveAccount (QObject *account);
		QList<QAction*> GetEditorActions () const;
		QList<InlineTagInserter> GetInlineTagInserters () const;
		QList<QWidget*> GetBlogiqueSideWidgets () const;

		void SetPluginProxy (QObject *proxy);
		void Prepare ();
		void Release ();

		QList<QPair<QRegExp, QString>> GetHtml2RichPairs () const;
		QList<QPair<QRegExp, QString>> GetRich2HtmlPairs () const;

	private:
		void RestoreAccounts ();

	private slots:
		void saveAccounts ();
		void handleAddLJUser ();
		void handleAddLJPoll ();
	public slots:
		void handleAccountValidated (bool validated);
		void handleMessageChecking ();
		void handleCommentsChecking ();
		void checkForMessages ();
		void checkForComments ();

	signals:
		void accountAdded (QObject *account);
		void accountRemoved (QObject *account);
		void accountValidated (QObject *account, bool validated);
		void insertTag (const QString& tag);
	};
}
}
}
