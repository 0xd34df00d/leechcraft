/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <boost/bimap.hpp>
#include <QObject>
#include <QQueue>
#include "interfaces/netstoremanager/isupportfilelistings.h"
#include "syncmanager.h"

namespace LeechCraft
{
namespace NetStoreManager
{
	class IStorageAccount;

	class Syncer : public QObject
	{
		Q_OBJECT

		QString LocalPath_;
		QString RemotePath_;
		bool Started_;
		IStorageAccount *Account_;
		ISupportFileListings *SFLAccount_;
		QHash<QByteArray, StorageItem> Id2Item_;
		boost::bimaps::bimap<QByteArray, QString> Id2Path_;
		QQueue<std::function<void (void)>> CallsQueue_;

		Snapshot_t Snapshot_;

	public:
		explicit Syncer (const QString& dirPath, const QString& remotePath,
				IStorageAccount *isa, QObject *parent = 0);

		QByteArray GetAccountID () const;
		QString GetLocalPath () const;
		QString GetRemotePath () const;

		Snapshot_t GetSnapshot () const;
		void SetSnapshot (const Changes_t& changes);

		bool IsStarted () const;
	private:
		void CreateRemotePath (const QStringList& path);
		void DeleteRemotePath (const QStringList& path);
		void RenameItem (const StorageItem& item, const QString& path);
		Snapshot_t CreateSnapshot ();
		Snapshot_t CreateDiffSnapshot (const Snapshot_t& newSnapshot,
				const Snapshot_t& oldSnapshot);

	public slots:
		void start ();
		void stop ();

		void handleGotItems (const QList<StorageItem>& items);
		void handleGotNewItem (const StorageItem& item, const QByteArray& parentId);
		void handleGotChanges (const QList<Change>& changes);

		void localDirWasCreated (const QString& path);
		void localDirWasRemoved (const QString& path);
		void localFileWasCreated (const QString& path);
		void localFileWasRemoved (const QString& path);
		void localFileWasUpdated (const QString& path);
		void localFileWasRenamed (const QString& oldName, const QString& newName);
	};
}
}
