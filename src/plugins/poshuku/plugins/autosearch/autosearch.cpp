/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "autosearch.h"
#include <QUrl>

#ifdef USE_QT5
#include <QUrlQuery>
#endif

#include <QNetworkRequest>
#include <QNetworkReply>
#include <QDomDocument>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/poshuku/iurlcompletionmodel.h>

namespace LeechCraft
{
namespace Poshuku
{
namespace Autosearch
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Proxy_ = proxy;
	}

	void Plugin::SecondInit ()
	{
	}

	void Plugin::Release ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Poshuku.Autosearch";
	}

	QString Plugin::GetName () const
	{
		return "Poshuku Autosearch";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Provides support for Google search suggestions.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	QSet<QByteArray> Plugin::GetPluginClasses () const
	{
		QSet<QByteArray> result;
		result << "org.LeechCraft.Poshuku.Plugins/1.0";
		return result;
	}

	void Plugin::hookURLCompletionNewStringRequested (IHookProxy_ptr,
			QObject *model,
			const QString& string,
			int historyItems)
	{
		if (Model2Reply_.contains (model))
		{
			auto reply = Model2Reply_.take (model);
			Reply2Model_.remove (reply);
			delete reply;
		}

		if (string.isEmpty ())
			return;

		QUrl reqUrl ("http://clients1.google.com/complete/search");
#ifdef USE_QT5
		QUrlQuery query;
		query.addQueryItem ("hl", "en");
		query.addQueryItem ("output", "toolbar");
		query.addQueryItem ("q", string);
		reqUrl.setQuery (query);
#else
		reqUrl.addQueryItem ("hl", "en");
		reqUrl.addQueryItem ("output", "toolbar");
		reqUrl.addQueryItem ("q", string);
#endif

		auto reply = Proxy_->GetNetworkAccessManager ()->get (QNetworkRequest (reqUrl));
		connect (reply,
				SIGNAL (finished ()),
				this,
				SLOT (handleReply ()));
		Model2Reply_ [model] = reply;
		Reply2Model_ [reply] = model;
	}

	void Plugin::handleReply ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		if (!Reply2Model_.contains (reply))
		{
			qWarning () << Q_FUNC_INFO
					<< "stall reply detected";
			return;
		}

		const auto& data = reply->readAll ();

		auto model = Reply2Model_.take (reply);
		Model2Reply_.remove (model);

		QDomDocument doc;
		if (!doc.setContent (data))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to read reply";
			return;
		}

		auto iURLCompleter = qobject_cast<IURLCompletionModel*> (model);

		auto suggestion = doc.documentElement ().firstChildElement ("CompleteSuggestion");
		auto pos = 5;
		while (!suggestion.isNull ())
		{
			const auto& str = suggestion.firstChildElement ("suggestion").attribute ("data");

			iURLCompleter->AddItem (str, str, pos++);

			suggestion = suggestion.nextSiblingElement ("CompleteSuggestion");
		}
	}
}
}
}

LC_EXPORT_PLUGIN (leechcraft_poshuku_autosearch, LeechCraft::Poshuku::Autosearch::Plugin);
