/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "notifier.h"
#include <QTextDocument>
#include <util/util.h>
#include <interfaces/core/ientitymanager.h>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace GmailNotifier
{
	Notifier::Notifier (ICoreProxy_ptr proxy, QObject *parent)
	: QObject (parent)
	, Proxy_ (proxy)
	{
	}

	void Notifier::notifyAbout (const ConvInfos_t& infos)
	{
		qDebug () << Q_FUNC_INFO << infos.size ();
		if (infos == PreviousInfos_)
			return;

		PreviousInfos_ = infos;

		if (infos.isEmpty ())
			return;

		const int fullShow = XmlSettingsManager::Instance ()->
				property ("ShowLastNMessages").toInt ();

		auto textWFallback = [] (const QString& text, const QString& fallback)
			{ return text.isEmpty () ? fallback : Qt::escape (text); };

		int handledMsgs = 0;
		QString result;
		for (const auto& info : infos)
		{
			result += QString::fromUtf8 ("<p><font color=\"#004C00\">\302\273</font>&nbsp;<a href=\"");
			result += info.Link_.toString () + "\">";
			result += textWFallback (info.Title_, tr ("No subject")) + "</a> " + tr ("from") + " ";
			result += "<a href=\"https://mail.google.com/mail?extsrc=mailto&url=mailto:";
			result += info.AuthorEmail_ + "\">";
			result += info.AuthorName_ + "</a><br/>";
			result += tr ("at") + " ";
			result += info.Modified_.toString (Qt::SystemLocaleLongDate);
			result += "</p><p class=\"additionaltext\">";
			result += Qt::escape (info.Summary_) + "</p>";

			if (++handledMsgs == fullShow)
				break;
		}

		if (infos.size () > fullShow)
			result += "<p><em>&hellip;" +
					tr ("and %1 more").arg (infos.size () - fullShow) +
					"</em></p>";

		const auto& e = Util::MakeNotification ("GMail", result, PInfo_);
		Proxy_->GetEntityManager ()->HandleEntity (e);
	}
}
}
